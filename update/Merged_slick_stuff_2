# slick/system/maintenance.py
import os
import json
import shutil
import sqlite3
import zipfile
from pathlib import Path
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

class SystemMaintenance:
    """Core system maintenance operations"""
    
    @staticmethod
    def create_snapshot(snapshot_dir=None):
        """Create a system snapshot"""
        if snapshot_dir is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            snapshot_dir = Path(f"slick_snapshot_{timestamp}")
        
        snapshot_dir.mkdir()
        
        # Core systems
        shutil.copytree('core', snapshot_dir/'core')
        shutil.copytree('knowledge', snapshot_dir/'knowledge')
        shutil.copytree('memory', snapshot_dir/'memory')
        
        # Create version manifest
        with open(snapshot_dir/'version.json', 'w') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "components": {
                    "core": "1.2.0",
                    "knowledge": "2.1.3",
                    "memory": "1.5.2"
                }
            }, f)
        
        return str(snapshot_dir)

    @staticmethod
    def restore_from_snapshot(snapshot_dir="snapshots/latest"):
        """Restore system from snapshot"""
        with open(f"{snapshot_dir}/manifest.json") as f:
            manifest = json.load(f)
        
        for file in manifest['files']:
            Path(file['path']).parent.mkdir(exist_ok=True)
            with open(file['path'], 'w') as f:
                f.write(file['content'])
        
        for db, schema in manifest['databases'].items():
            conn = sqlite3.connect(db)
            conn.executescript(schema)
            conn.close()
        
        return f"System restored from {snapshot_dir}"

    @staticmethod
    def apply_update(zip_path="AutoMemory_Engine.zip", target_dir="."):
        """Apply system update from zip file"""
        if not os.path.exists(zip_path):
            raise FileNotFoundError(f"Zip file not found: {zip_path}")
        
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall("_temp_update")

        for root, dirs, files in os.walk("_temp_update"):
            for name in files:
                src_path = os.path.join(root, name)
                rel_path = os.path.relpath(src_path, "_temp_update")
                dst_path = os.path.join(target_dir, rel_path)

                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                shutil.copy2(src_path, dst_path)

        shutil.rmtree("_temp_update")
        os.remove(zip_path)
        return "Update complete and zip removed."


class ProjectStructureValidator:
    """Validate and fix project structure"""
    
    @staticmethod
    def analyze_new_folders(base_dir="slick_ai_system"):
        """Analyze folder structure for anomalies"""
        new_folders = []
        existing = ["core", "interface", "knowledge", "memory"]
        
        for item in os.listdir(base_dir):
            if os.path.isdir(item) and item not in existing:
                new_folders.append(item)
        
        results = []
        for folder in new_folders:
            size = sum(f.stat().st_size for f in Path(folder).rglob('*') if f.is_file())
            results.append({
                "folder": folder,
                "size_kb": size/1024,
                "status": "unexpected"
            })
        
        return results

    @staticmethod
    def create_init_files():
        """Ensure proper Python package structure"""
        directories = [
            'core',
            'core/cognitive_engine',
            'config',
            'interface'
        ]
        
        created = []
        for dir in directories:
            init_path = os.path.join(dir, '__init__.py')
            if not os.path.exists(init_path):
                with open(init_path, 'w') as f:
                    f.write("# Package initialization\n")
                created.append(init_path)
        
        return created


class TestRunner:
    """Automated test execution and reporting"""
    
    TEST_CONFIG = {
        "unit_tests": "pytest tests/unit --color=yes",
        "integration_tests": "pytest tests/integration --color=yes",
        "structure_check": "python tests/cohesion/check_project_structure.py",
        "service_tests": "python tests/manual/test_service_control.py",
        "security_audit": "bandit -r slick"
    }

    def __init__(self):
        self.executor = ThreadPoolExecutor(max_workers=4)

    def run_test(self, name, command):
        """Run a test suite asynchronously"""
        def _run():
            result = subprocess.run(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            return {
                "name": name,
                "passed": result.returncode == 0,
                "output": result.stdout
            }
        return self.executor.submit(_run)

    def run_all_tests(self):
        """Execute all configured tests"""
        futures = []
        for name, command in self.TEST_CONFIG.items():
            futures.append((name, self.run_test(name, command)))
        
        results = []
        for name, future in futures:
            results.append((name, future.result()))
        
        return self.generate_report(results)

    def generate_report(self, results):
        """Generate comprehensive test report"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "results": [],
            "summary": {
                "total": len(results),
                "passed": 0,
                "failed": 0
            }
        }
        
        for name, result in results:
            report["results"].append(result)
            if result["passed"]:
                report["summary"]["passed"] += 1
            else:
                report["summary"]["failed"] += 1
        
        os.makedirs("tests/reports", exist_ok=True)
        report_file = f"tests/reports/test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        return report_file


class BackupManager:
    """System backup and restore operations"""
    
    def __init__(self, backup_dir="backups"):
        self.backup_dir = Path(backup_dir)
        self.backup_dir.mkdir(exist_ok=True)
    
    def create_backup(self, include_databases=True):
        """Create comprehensive system backup"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = self.backup_dir / f"backup_{timestamp}"
        backup_path.mkdir()
        
        # Backup core directories
        for dir in ['core', 'config', 'memory', 'knowledge']:
            shutil.copytree(dir, backup_path/dir)
        
        # Backup databases if requested
        if include_databases:
            for db in ['knowledge.db', 'memory.db']:
                if os.path.exists(db):
                    shutil.copy(db, backup_path)
        
        # Create manifest
        manifest = {
            "timestamp": timestamp,
            "components": ["core", "memory", "knowledge"],
            "database_files": include_databases
        }
        
        with open(backup_path/"manifest.json", 'w') as f:
            json.dump(manifest, f)
        
        return str(backup_path)
    
    def restore_backup(self, backup_path):
        """Restore system from backup"""
        backup_path = Path(backup_path)
        if not backup_path.exists():
            raise FileNotFoundError(f"Backup not found: {backup_path}")
        
        # Restore directories
        for dir in ['core', 'config', 'memory', 'knowledge']:
            if (backup_path/dir).exists():
                shutil.rmtree(dir, ignore_errors=True)
                shutil.copytree(backup_path/dir, dir)
        
        # Restore databases
        manifest_path = backup_path/"manifest.json"
        if manifest_path.exists():
            with open(manifest_path) as f:
                manifest = json.load(f)
            
            if manifest.get("database_files", False):
                for db in ['knowledge.db', 'memory.db']:
                    if (backup_path/db).exists():
                        shutil.copy(backup_path/db, ".")
        
        return f"System restored from {backup_path}"


class VersionMigrator:
    """Handle version upgrades and migrations"""
    
    VERSION_MAP = {
        "core": {"2.1.x": "2.2.x"},
        "memory": {"1.5.x": "1.6.x"}
    }

    def migrate_all(self):
        """Execute all pending migrations"""
        results = []
        for module, versions in self.VERSION_MAP.items():
            current = self.get_current_version(module)
            target = versions.get(current)
            
            if target:
                result = self.run_migration_script(module, current, target)
                results.append({
                    "module": module,
                    "from_version": current,
                    "to_version": target,
                    "success": result
                })
        
        return results

    def get_current_version(self, module):
        """Get current version of a module"""
        # Simplified version detection
        if module == "core":
            return "2.1.x"
        elif module == "memory":
            return "1.5.x"
        return "unknown"

    def run_migration_script(self, module, from_v, to_v):
        """Execute migration script"""
        # Placeholder for actual migration logic
        print(f"Executing {module}/{from_v}_to_{to_v}.py...")
        return True


# Utility functions
def get_file_checksums(directory="."):
    """Generate checksums for all files in directory"""
    checksums = {}
    for root, dirs, files in os.walk(directory):
        for file in files:
            path = os.path.join(root, file)
            with open(path, 'rb') as f:
                checksums[path] = hashlib.md5(f.read()).hexdigest()
    return checksums

def check_db_integrity(db_path):
    """Verify database integrity"""
    conn = sqlite3.connect(db_path)
    try:
        conn.execute("PRAGMA integrity_check")
        return True
    except sqlite3.DatabaseError:
        return False
    finally:
        conn.close()